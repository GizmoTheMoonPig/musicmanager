plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.+'
	id 'net.neoforged.gradle.mixin' version '7.0.+'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.music'
base {
	archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

runs {
	configureEach {
		workingDirectory project.file("run")
		systemProperty 'forge.logging.console.level', 'debug'
		systemProperty 'mixin.env.disableRefMap', 'true'

		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', modid
		programArgument "-mixin.config=${project.modid}.mixins.json"
		programArguments.addAll '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', modid
		programArgument '--nogui'
	}

	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', modid
	}

	data {
		programArguments.addAll '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url = "https://modmaven.dev/"
	}

	maven {
		name 'Curseforge Maven'
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	implementation "net.neoforged:neoforge:${project.neo_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_name,
				"Specification-Vendor"    : "GizmoTheMoonPig",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.mod_name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "GizmoTheMoonPig",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact project.jar
				artifact project.sourceJar
			}
			setGroupId 'gizmo'
			setArtifactId 'musicmanager'
		}
	}
	repositories {
		maven {
			url "https://maven.tamaized.com/releases"
			credentials {
				username mavenUser
				password mavenToken
			}
		}
	}
}

tasks.register('sourceJar', Jar) {
	dependsOn 'classes'
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}