plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.music'
base {
    archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${project.minecraft_version}"
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run")
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName "Minecraft_Client_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', modid
            arg "-mixin.config=${project.modid}.mixins.json"
            args '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
        }

        server {
            taskName "Minecraft_Server_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', modid
            args '--nogui'
        }

        gameTestServer {
            taskName "Minecraft_GameTestServer_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', modid
        }

        data {
            taskName "Minecraft_Data_${project.minecraft_version}"
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${project.modid}.refmap.json"
    config "${project.modid}.mixins.json"
}

repositories {
    maven {
        url = "https://modmaven.dev/"
    }

    maven {
        name 'Curseforge Maven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.neo_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //runtimeOnly fg.deobf("teamtwilight:twilightforest:4.3.1759:universal")
    runtimeOnly fg.deobf("curse.maven:blue-skies-312918:4765673")
    runtimeOnly fg.deobf("curse.maven:gel-api-378802:4765568")
    //runtimeOnly fg.deobf("curse.maven:bumblezone-362479:4777096")
    //runtimeOnly fg.deobf("curse.maven:undergarden-379849:4682838")
    //runtimeOnly fg.deobf("curse.maven:aether-255308:4771519")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "GizmoTheMoonPig",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GizmoTheMoonPig",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'gizmo'
            setArtifactId 'musicmanager'
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}